// Чему равно а, почему?
// Логическое или (||) запинается на правде. Логическое и (&&) запинается на лжи. Проверка идет слева на право.
// Поэтому я буду смотреть к чему приводятся операнды и в каком месте они находятся, из чего и буду делать вывод.
let a = 0 || 'string';
// string. . 0 приводитсяк false, 'string' - true.
let a1 = 1 && 'string';
// string. . 1 и 'string' - true. Но 'string' последний.
let a2 = null || 25;
// 25. null - false. 25 - true.
let a3 = null && 25;
// null. null приводится к false.
let a4 = null || 0 || 35;
// 35. null, 0 - false. 35 - true.
let a5 = null && 0 && 35;
// null. null, 0 - false. 35 - true. Null - первая ложь.

// Что отобразится в консоли. Почему?
// 12 + 14 + '12'
// '2612'. 12 + 14 - это числа они сложатся будет 26. Так как '12' - строка, то в выражении 26 + '12' знак "+" - это
// не арифметический плюс, а - конкатенация строк

// 3 + 2 - '1'
// 4. 3 + 2 - арифметичкий плюс. 5 - '1' = 4, '1' неявно преобразуется к 1.

// '3' + 2 - 1
// 31. '3' + 2 - конкатенируют в "32". А при знаке минус происходит неявное преобоазование типов,
// и получаем 32-1=31

// true + 2
// 3. true приводится к 1.

// +'10' + 1
// 11. Унарный плюс преобразует '10' к числу. Имеем арифметическую операцию 10 + 1 = 11.

// undefined + 2
// NaN. Результат неправильной матиматичкой операции - NaN. Undefined преобразуется к false, false + 2 = NaN.

// null + 5
// 5. null - преобразуется к 0. Арифметическая операция 0 + 5 = 5.

// true + undefined
// NaN. Результат неправильной матиматичкой операции - NaN. true приводится к 1. undefined приводится к false.
// 1 + false = NaN
